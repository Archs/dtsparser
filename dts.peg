package main

import "github.com/Archs/dtsparser/dts"

type Parser Peg {
	*dts.DTS
}

start
	<- SPACE (ModuleDeclaration / ClassDeclaration / InterfaceDeclaration )+ eof

ModuleDeclaration
	<- modifier? 'module' SPACE <identifier> ModuleBody {p.NewModule(text)}

ModuleBody
	<- block_start 
		   (ClassDeclaration
		   	/ InterfaceDeclaration
		   	/ ModuleDeclaration
			/ VariableDeclaration
			/ FuncDeclaration)*
	   block_end

ClassDeclaration
	<- modifier? 'class' SPACE <identifier> ExtendClause? ImplementClause? ClassBody {p.NewClass(text)}

InterfaceDeclaration
	<- modifier? 'interface' SPACE <identifier> ExtendClause? ClassBody {p.NewInterface(text)}

ClassBody
	<- block_start
			(VariableDeclaration / FuncDeclaration)* 
	   block_end

ExtendClause
	<- SPACE 'extends' SPACE identifier

ImplementClause
	<- SPACE 'implements' SPACE identifier

VariableDeclaration
	<- <modifier? VariableDifinition> DeclarationSeperator {p.NewVariable(text)}

FuncDeclaration
	<- <modifier? identifier FuncType> DeclarationSeperator {p.NewFunction(text)}

Type
	<- BasicType (SPACE '|' SPACE BasicType)*

BasicType
	<- ObjectType 
		/ ArrayType
		/ FuncType 
		/ "number" 
		/ "boolean"
		/ "string"
		/ "function"
		/ "any"
		/ LiteralType
		/ identifier

FuncType
	<- paren_start 
			VariableDifinition? (ArgumentSeperator VariableDifinition)*
	   paren_end 
	   (( FuncReturn / TypeSeperator) Type)?

ArrayType
	<-  ("number" 
		/ "boolean"
		/ "string"
		/ "function"
		/ "Function"
		/ "any"
		/ identifier) '[]'

ObjectType
	<- block_start
			VariableDeclaration*
	   block_end

LiteralType
	<- ['] identifier [']

VariableDifinition
	<- identifier TypeSeperator Type

TypeSeperator
	<- SPACE ':' SPACE

FuncReturn
	<- SPACE '=>' SPACE

ArgumentSeperator
	<- SPACE ',' SPACE

DeclarationSeperator
	<- ((';' / eol)? SPACE)?

keywords
	<- 'module' / 'class' / 'interface' / 'extends' / 'implements'
		/ 'boolean' / 'number' / 'string' / 'void'

modifier
	<- (('declare' / 'export' / 'private' / 'static') SPACE)+

identifier
	<- ([[A-Z]]/[_.]) ([[A-Z]]/[0-9]/[_?.])*

separator
	<- [:;(){},\[\]=>]

Comment
	<- LineComment / BlockComment

LineComment
	<- '//' (!eol .)* eol

BlockComment
	<- '/*' (!'*/' .)* '*/'

block_start
	<- SPACE '{' SPACE

block_end
	<- SPACE '}' SPACE

paren_start
	<- SPACE '(' SPACE

paren_end
	<- SPACE ')' SPACE

SPACE
	<- spacing* 

ws				<- [ \t\n\r]
spacing         <- [ \t\n\r] / Comment
eol             <- '\n'
eof             <- !.
